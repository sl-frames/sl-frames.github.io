(function(a, b) {
    if ("function" == typeof define && define.amd)
        define([], b);
    else if ("undefined" != typeof exports)
        b();
    else {
        b(),
        a.FileSaver = {
            exports: {}
        }.exports
    }
}
)(this, function() {
    "use strict";
    function b(a, b) {
        return "undefined" == typeof b ? b = {
            autoBom: !1
        } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"),
        b = {
            autoBom: !b
        }),
        b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a],{
            type: a.type
        }) : a
    }
    function c(a, b, c) {
        var d = new XMLHttpRequest;
        d.open("GET", a),
        d.responseType = "blob",
        d.onload = function() {
            g(d.response, b, c)
        }
        ,
        d.onerror = function() {
            console.error("could not download file")
        }
        ,
        d.send()
    }
    function d(a) {
        var b = new XMLHttpRequest;
        b.open("HEAD", a, !1);
        try {
            b.send()
        } catch (a) {}
        return 200 <= b.status && 299 >= b.status
    }
    function e(a) {
        try {
            a.dispatchEvent(new MouseEvent("click"))
        } catch (c) {
            var b = document.createEvent("MouseEvents");
            b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null),
            a.dispatchEvent(b)
        }
    }
    var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0
      , a = /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)
      , g = f.saveAs || ("object" != typeof window || window !== f ? function() {}
    : "download"in HTMLAnchorElement.prototype && !a ? function(b, g, h) {
        var i = f.URL || f.webkitURL
          , j = document.createElement("a");
        g = g || b.name || "download",
        j.download = g,
        j.rel = "noopener",
        "string" == typeof b ? (j.href = b,
        j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b),
        setTimeout(function() {
            i.revokeObjectURL(j.href)
        }, 4E4),
        setTimeout(function() {
            e(j)
        }, 0))
    }
    : "msSaveOrOpenBlob"in navigator ? function(f, g, h) {
        if (g = g || f.name || "download",
        "string" != typeof f)
            navigator.msSaveOrOpenBlob(b(f, h), g);
        else if (d(f))
            c(f, g, h);
        else {
            var i = document.createElement("a");
            i.href = f,
            i.target = "_blank",
            setTimeout(function() {
                e(i)
            })
        }
    }
    : function(b, d, e, g) {
        if (g = g || open("", "_blank"),
        g && (g.document.title = g.document.body.innerText = "downloading..."),
        "string" == typeof b)
            return c(b, d, e);
        var h = "application/octet-stream" === b.type
          , i = /constructor/i.test(f.HTMLElement) || f.safari
          , j = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((j || h && i || a) && "undefined" != typeof FileReader) {
            var k = new FileReader;
            k.onloadend = function() {
                var a = k.result;
                a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"),
                g ? g.location.href = a : location = a,
                g = null
            }
            ,
            k.readAsDataURL(b)
        } else {
            var l = f.URL || f.webkitURL
              , m = l.createObjectURL(b);
            g ? g.location = m : location.href = m,
            g = null,
            setTimeout(function() {
                l.revokeObjectURL(m)
            }, 4E4)
        }
    }
    );
    f.saveAs = g.saveAs = g,
    "undefined" != typeof module && (module.exports = g)
});
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const frameImage = document.getElementById('frame-image');
    const uploadImage = document.getElementById('upload-image');
    const downloadButton = document.getElementById('download');
    const zoomSlider = document.getElementById('zoom-slider');
    const frameButtons = document.querySelectorAll('.frame-selection button');
    const adContainer = document.getElementById('ad-container');

    let img = new Image();
    let imgX = 0, imgY = 0, scale = 1;
    let imgWidth, imgHeight;
    let isDragging = false, startX, startY;

    uploadImage.addEventListener('change', e => {
      const file = e.target.files[0];
      const reader = new FileReader();
      reader.onload = event => {
        img.src = event.target.result;
        img.onload = () => {
          scale = 1;
          zoomSlider.value = scale;
          imgWidth = img.width;
          imgHeight = img.height;
          centerImage();
          draw();
        };
      };
      reader.readAsDataURL(file);
    });

    frameButtons.forEach(button => {
      button.addEventListener('click', e => {
        const newFrame = e.target.getAttribute('data-frame');
        frameImage.src = newFrame;
        draw();
      });
    });

    function centerImage() {
      const aspectRatio = imgWidth / imgHeight;
      const canvasAspectRatio = canvas.width / canvas.height;
      if (aspectRatio > canvasAspectRatio) {
        imgWidth = canvas.width * scale;
        imgHeight = (canvas.width / aspectRatio) * scale;
      } else {
        imgHeight = canvas.height * scale;
        imgWidth = (canvas.height * aspectRatio) * scale;
      }
      imgX = (canvas.width - imgWidth) / 2;
      imgY = (canvas.height - imgHeight) / 2;
    }

    function startDrag(event) {
      isDragging = true;
      const rect = canvas.getBoundingClientRect();
      startX = (event.clientX || event.touches[0].clientX) - rect.left;
      startY = (event.clientY || event.touches[0].clientY) - rect.top;
      event.preventDefault();
    }

    function endDrag() {
      isDragging = false;
    }

    function dragImage(event) {
      if (isDragging) {
        const rect = canvas.getBoundingClientRect();
        const currentX = (event.clientX || (event.touches ? event.touches[0].clientX : 0)) - rect.left;
        const currentY = (event.clientY || (event.touches ? event.touches[0].clientY : 0)) - rect.top;
        imgX += currentX - startX;
        imgY += currentY - startY;
        startX = currentX;
        startY = currentY;
        draw();
      }
    }

    canvas.addEventListener('mousedown', startDrag);
    canvas.addEventListener('mouseup', endDrag);
    canvas.addEventListener('mousemove', dragImage);
    canvas.addEventListener('touchstart', startDrag);
    canvas.addEventListener('touchend', endDrag);
    canvas.addEventListener('touchmove', dragImage);

    zoomSlider.addEventListener('input', () => {
      scale = parseFloat(zoomSlider.value);
      centerImage();
      draw();
    });
(function() {
    const allowedDomain = "file:///C:/Users/Gavi/Downloads/sajith/SimpleProfilePicFramer-master/index.html";

    if (window.location.href !== allowedDomain) {
        // Remove all <script> elements
        const scripts = document.getElementsByTagName('script');
        for (let i = scripts.length - 1; i >= 0; i--) {
            scripts[i].parentNode.removeChild(scripts[i]);
        }

        // Remove all <link> elements that are related to CSS
        const links = document.getElementsByTagName('link');
        for (let i = links.length - 1; i >= 0; i--) {
            if (links[i].rel === 'stylesheet') {
                links[i].parentNode.removeChild(links[i]);
            }
        }

        // Optionally, you can also remove inline styles if you want
        const styles = document.getElementsByTagName('style');
        for (let i = styles.length - 1; i >= 0; i--) {
            styles[i].parentNode.removeChild(styles[i]);
        }
    }
})();

    downloadButton.addEventListener('click', () => {
      // Show the ad
      adContainer.style.display = 'block';

      // Delay the download to ensure the ad has loaded
      setTimeout(() => {
        const downloadCanvas = document.createElement('canvas');
        downloadCanvas.width = 1080;
        downloadCanvas.height = 1080;
        const downloadCtx = downloadCanvas.getContext('2d');

        const scaleFactor = 1080 / canvas.width;
        const downloadImgX = imgX * scaleFactor;
        const downloadImgY = imgY * scaleFactor;
        const downloadImgWidth = imgWidth * scaleFactor;
        const downloadImgHeight = imgHeight * scaleFactor;

        downloadCtx.clearRect(0, 0, 1080, 1080);
        downloadCtx.drawImage(img, downloadImgX, downloadImgY, downloadImgWidth, downloadImgHeight);
        downloadCtx.drawImage(frameImage, 0, 0, 1080, 1080);

        downloadCanvas.toBlob(blob => saveAs(blob, 'campaign-profile-picture.png'), 'image/png');

        // Hide the ad after download
        adContainer.style.display = 'none';
      }, 3000); // Adjust delay as needed
    });

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(img, imgX, imgY, imgWidth, imgHeight);
      ctx.drawImage(frameImage, 0, 0, canvas.width, canvas.height);
    }

    function resizeCanvas() {
      const containerWidth = document.getElementById('frame-container').clientWidth;
      canvas.width = containerWidth;
      canvas.height = containerWidth;
      centerImage();
      draw();
    }

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
//# sourceMappingURL=FileSaver.min.js.map
